import org.ajoberstar.grgit.gradle.GrgitPlugin

buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            name 'MinecraftForge'
            url 'https://maven.minecraftforge.net/'
        }
        maven {
            url 'https://gitlab.com/api/v4/projects/70917004/packages/maven'
        }
        //fallback for fancygradle maven
        //mavenLocal()
        maven {
            name 'Sponge'
            url 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            url 'https://maven.cleanroommc.com'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }

    repositories.each {
        if (it instanceof MavenArtifactRepository && it.url.toString() == "https://files.minecraftforge.net/maven") {
            it.url = "https://maven.minecraftforge.net"
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: GrgitPlugin
apply plugin: 'wtf.gofancy.fancygradle'

group = "${project.maven_group}" // groupId
archivesBaseName = "${project.jar_name}" // artifactId - modid
version = "${project.mc_version}-${project.mod_version}"


sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"

    def argsz = ["-Dmixin.debug.export=true",
                 '-Dmixin.hotSwap=true',
                 '-Dmixin.checks.interfaces=true',
                 '--username', 'ipdnaeip', '--user', 'ipdnaeip', '--uuid', 'ed54ba92-c7f9-469c-b255-f46532efefdd',
                 '-Dfml.coreMods.load=' + coremod_plugin_class_name]

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            args argsz
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = 'Sponge'
        url = uri('https://repo.spongepowered.org/maven')
    }
    maven {
        url = uri('https://maven.blamejared.com')
    }
    maven {
        url = uri('https://m2.dv8tion.net/releases')
    }
    maven { url = 'https://maven.cleanroommc.com' }
    maven {
        url = uri('https://jitpack.io')
    }
    flatDir {
        // location for sources
        dirs 'build/libs'
    }
}

dependencies {
    //// MC version ////
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    //// Dependencies ////
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:24.1.1-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.6'

    implementation fg.deobf("curse.maven:ElectroblobsWizardry-${wizardry_projectid}:${wizardry_fileid}")
    implementation fg.deobf("curse.maven:baubles-${baubles_projectid}:${baubles_fileid}")
    implementation fg.deobf("curse.maven:MixinBooter-${mixinbooter_projectid}:${mixinbooter_fileid}")
    implementation fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")

}

mixin {
    add sourceSets.main, "wizardrynextgeneration.refmap.json"
    disableAnnotationProcessorCheck()
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

jar {
    manifest {
        attributes([
                "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": "wizardrynextgeneration",
                "Specification-Vendor": "ipdnaeip",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ipdnaeip",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'TweakClass' : "org.spongepowered.asm.launch.MixinTweaker",
                "Built-On": "${project.mc_version}-${project.forge_version}",
                "FMLAT": "accesstransformers.cfg"
        ])
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
                "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "ipdnaeip",
                "Specification-Version": "1",
                "Implementation-Title": archivesBaseName + '-sources',
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor": "ipdnaeip",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}",
                "FMLAT": "accesstransformers.cfg"
        ])
    }
}

jar {
    manifest {
        attributes([
                "Maven-Artifact"             : "${project.maven_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title"        : archivesBaseName,
                "Specification-Vendor"       : "ipdnaeip",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${version}",
                "Implementation-Vendor"      : "ipdnaeip",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin"              : "${coremod_plugin_class_name}",
                "FMLCorePluginContainsFMLMod": true,
                "Built-On-Java"              : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On"                   : "${project.mc_version}-${project.forge_version}"
        ])
    }
}
